local mapping_key_prefix = vim.g.ai_prefix_key or "<leader>a"
return {
  "olimorris/codecompanion.nvim",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-treesitter/nvim-treesitter",
  },
  opts = {
    language = "Japanese",
    display = {
      chat = {
        auto_scroll = false,
        show_header_separator = true,
      },
    },
    strategies = {
      chat = {
        adapter = "my_ai",
        roles = {
          llm = function(adapter)
            return " CodeCompanion (" .. adapter.formatted_name .. ")"
          end,
          user = " Me",
        },
      },
      inline = {
        adapter = "my_ai",
      },
      keymaps = {
        send = {
          modes = {
            n = "<CR>",
            i = "<C-CR>",
          },
          index = 1,
          callback = "keymaps.send",
          description = "Send",
        },
        close = {
          modes = {
            n = "q",
          },
          index = 3,
          callback = "keymaps.close",
          description = "Close Chat",
        },
        stop = {
          modes = {
            n = "<C-c>",
          },
          index = 4,
          callback = "keymaps.stop",
          description = "Stop Request",
        },
      },
    },
    adapters = {
      my_ai = function()
        return require("codecompanion.adapters").extend("ollama", {
          name = "my_ai", -- Give this adapter a different name to differentiate it from the default ollama adapter
          env = {
            url = "http://127.0.0.1:11434",
          },
          -- header = {
          --   ["Content-Type"] = "application/json",
          --   ["Authorization"] = "Bearer ${api_key}",
          -- },
          -- parameters = {
          --   sync = true,
          -- },

          schema = {
            model = {
              default = "gemma3:4b",
            },
            num_ctx = {
              default = 16384,
            },
            num_predict = {
              default = -1,
            },
          },
        })
      end,
    },
    prompt_library = {
      ["Translate to English"] = {
        strategy = "inline",
        description = "選択したテキストを英語に翻訳します",
        opts = {
          short_name = "trans_to_en",
          modes = { "v" },
          adapter = {
            name = "copilot",
            model = "gpt-4o",
          },
          -- INFO: コードを見るとstrategy = "inline" で対応してなさそう
          -- ignore_system_prompt = true,
        },
        prompts = {
          {
            role = "system",
            content = "あなたは優れた開発者であり、日本語と英語のプロ翻訳者でもあります。",
          },
          {
            role = "user",
            content = "<user_prompt>選択したコードドキュメントを英語に変換してください。</user_prompt>",
          },
        },
      },
    },
  },
  keys = {
    -- Recommend setup
    {
      mapping_key_prefix .. "a",
      "<cmd>CodeCompanionActions<cr>",
      desc = "Code Companion - Actions",
    },
    {
      mapping_key_prefix .. "v",
      "<cmd>CodeCompanionChat Toggle<cr>",
      desc = "Code Companion - Toggle",
      mode = { "n", "v" },
    },
    -- Some common usages with visual mode
    {
      mapping_key_prefix .. "e",
      "<cmd>CodeCompanion /explain<cr>",
      desc = "Code Companion - Explain code",
      mode = "v",
    },
    {
      mapping_key_prefix .. "f",
      "<cmd>CodeCompanion /fix<cr>",
      desc = "Code Companion - Fix code",
      mode = "v",
    },
    {
      mapping_key_prefix .. "l",
      "<cmd>CodeCompanion /lsp<cr>",
      desc = "Code Companion - Explain LSP diagnostic",
      mode = { "n", "v" },
    },
    {
      mapping_key_prefix .. "t",
      "<cmd>CodeCompanion /tests<cr>",
      desc = "Code Companion - Generate unit test",
      mode = "v",
    },
    {
      mapping_key_prefix .. "m",
      "<cmd>CodeCompanion /commit<cr>",
      desc = "Code Companion - Git commit message",
    },
    -- Custom prompts
    {
      mapping_key_prefix .. "M",
      "<cmd>CodeCompanion /staged-commit<cr>",
      desc = "Code Companion - Git commit message (staged)",
    },
    {
      mapping_key_prefix .. "d",
      "<cmd>CodeCompanion /inline-doc<cr>",
      desc = "Code Companion - Inline document code",
      mode = "v",
    },
    { mapping_key_prefix .. "D", "<cmd>CodeCompanion /doc<cr>", desc = "Code Companion - Document code", mode = "v" },
    {
      mapping_key_prefix .. "r",
      "<cmd>CodeCompanion /refactor<cr>",
      desc = "Code Companion - Refactor code",
      mode = "v",
    },
    {
      mapping_key_prefix .. "R",
      "<cmd>CodeCompanion /review<cr>",
      desc = "Code Companion - Review code",
      mode = "v",
    },
    {
      mapping_key_prefix .. "n",
      "<cmd>CodeCompanion /naming<cr>",
      desc = "Code Companion - Better naming",
      mode = "v",
    },
    -- Quick chat
    {
      mapping_key_prefix .. "q",
      function()
        local input = vim.fn.input("Quick Chat: ")
        if input ~= "" then
          vim.cmd("CodeCompanion " .. input)
        end
      end,
      desc = "Code Companion - Quick chat",
    },
  },
  -- keys = {
  --   {
  --     "<leader>acf",
  --     ":CodeCompanion<CR>",
  --     mode = { "n", "v" },
  --     silent = true,
  --     desc = "CodeCompanion",
  --   },
  --   {
  --     "<leader>acc",
  --     ":CodeCompanionChat<CR>",
  --     mode = { "n", "v" },
  --     silent = true,
  --     desc = "CodeCompanionChat",
  --   },
  --   {
  --     "<leader>aca",
  --     ":CodeCompanionAction<CR>",
  --     mode = { "n", "v" },
  --     silent = true,
  --     desc = "CodeCompanionAction",
  --   },
  -- },
}
